title "clock generator";


FUNCTION clocksm (clk, syncin, veto) RETURNS (sync, phase);


SUBDESIGN clockgen
(
	clk : INPUT;

	clkdiv[5..0] : INPUT;

	shift    : INPUT;
	stretch  : INPUT;
	sync     : OUTPUT;
	phase    : OUTPUT;

	adcclk  : OUTPUT;
	adcsync : OUTPUT;
)
VARIABLE
	counter[5..0] : DFF;
	
	adcgen    : clocksm;
	adcfsel   : NODE;
	adcsyncff : DFF;
	adcclkff  : DFF;
	
	clkgen  : clocksm;
	fsel    : NODE;
	syncff  : DFF;
	phaseff : DFF;

BEGIN
	-- main counter (phase register)
	counter[].clk = clk;
	IF shift THEN
		counter[].d = counter[];
	ELSE
		counter[].d = counter[] + 1;
	END IF;

	-- adc clock generator
	CASE clkdiv[5..3] IS
		WHEN 0 => adcfsel = counter[0];
		WHEN 1 => adcfsel = counter[1];
		WHEN 2 => adcfsel = counter[2];
		WHEN 3 => adcfsel = counter[3];
		WHEN 4 => adcfsel = counter[4];
		WHEN OTHERS => adcfsel = counter[5];
	END CASE;

	adcgen.clk = clk;
	adcgen.syncin = adcfsel;
	adcgen.veto = gnd;

	adcsyncff.clk = clk;
	adcsyncff.d = adcgen.sync;
	adcsync = adcsyncff;

	adcclkff.clk = clk;
	adcclkff.d = adcgen.phase;
	adcclk = adcclkff;

	-- sync/phase generator
	CASE clkdiv[2..0] IS
		WHEN 0 => fsel = counter[0];
		WHEN 1 => fsel = counter[1];
		WHEN 2 => fsel = counter[2];
		WHEN 3 => fsel = counter[3];
		WHEN 4 => fsel = counter[4];
		WHEN OTHERS => fsel = counter[5];
	END CASE;

	clkgen.clk = clk;
	clkgen.syncin = fsel;
	clkgen.veto = stretch;
	
	syncff.clk  = clk;
	syncff.d = clkgen.sync;
	sync = syncff;
	
	phaseff.clk = clk;
	phaseff.d   = clkgen.phase;
	phase = phaseff;
END;

